// Generated by gencpp from file crazyswarm/MotorControl.msg
// DO NOT EDIT!


#ifndef CRAZYSWARM_MESSAGE_MOTORCONTROL_H
#define CRAZYSWARM_MESSAGE_MOTORCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crazyswarm
{
template <class ContainerAllocator>
struct MotorControl_
{
  typedef MotorControl_<ContainerAllocator> Type;

  MotorControl_()
    : pwm1(0)
    , pwm2(0)
    , pwm3(0)
    , pwm4(0)  {
    }
  MotorControl_(const ContainerAllocator& _alloc)
    : pwm1(0)
    , pwm2(0)
    , pwm3(0)
    , pwm4(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pwm1_type;
  _pwm1_type pwm1;

   typedef uint16_t _pwm2_type;
  _pwm2_type pwm2;

   typedef uint16_t _pwm3_type;
  _pwm3_type pwm3;

   typedef uint16_t _pwm4_type;
  _pwm4_type pwm4;





  typedef boost::shared_ptr< ::crazyswarm::MotorControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazyswarm::MotorControl_<ContainerAllocator> const> ConstPtr;

}; // struct MotorControl_

typedef ::crazyswarm::MotorControl_<std::allocator<void> > MotorControl;

typedef boost::shared_ptr< ::crazyswarm::MotorControl > MotorControlPtr;
typedef boost::shared_ptr< ::crazyswarm::MotorControl const> MotorControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazyswarm::MotorControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazyswarm::MotorControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::crazyswarm::MotorControl_<ContainerAllocator1> & lhs, const ::crazyswarm::MotorControl_<ContainerAllocator2> & rhs)
{
  return lhs.pwm1 == rhs.pwm1 &&
    lhs.pwm2 == rhs.pwm2 &&
    lhs.pwm3 == rhs.pwm3 &&
    lhs.pwm4 == rhs.pwm4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::crazyswarm::MotorControl_<ContainerAllocator1> & lhs, const ::crazyswarm::MotorControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace crazyswarm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::MotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazyswarm::MotorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::MotorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazyswarm::MotorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::MotorControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazyswarm::MotorControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazyswarm::MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52fe88708ffbbd4d5df7a311ea5f53a4";
  }

  static const char* value(const ::crazyswarm::MotorControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52fe88708ffbbd4dULL;
  static const uint64_t static_value2 = 0x5df7a311ea5f53a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::crazyswarm::MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazyswarm/MotorControl";
  }

  static const char* value(const ::crazyswarm::MotorControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazyswarm::MotorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 pwm1\n"
"uint16 pwm2\n"
"uint16 pwm3\n"
"uint16 pwm4\n"
;
  }

  static const char* value(const ::crazyswarm::MotorControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazyswarm::MotorControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pwm1);
      stream.next(m.pwm2);
      stream.next(m.pwm3);
      stream.next(m.pwm4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazyswarm::MotorControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazyswarm::MotorControl_<ContainerAllocator>& v)
  {
    s << indent << "pwm1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm1);
    s << indent << "pwm2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm2);
    s << indent << "pwm3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm3);
    s << indent << "pwm4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZYSWARM_MESSAGE_MOTORCONTROL_H
